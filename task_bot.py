import telebot
from telebot import types

# –ß—Ç–µ–Ω–∏–µ —Ç–æ–∫–µ–Ω–∞ –∏–∑ —Ñ–∞–π–ª–∞
with open('token.txt', 'r') as file:
    TOKEN = file.read().strip()

bot = telebot.TeleBot(TOKEN)

tasks = {}  # Dictionary to store tasks for each user
user_states = {}  # Dictionary to track user states

@bot.message_handler(commands=['start'])
def handle_start(message):
    user_id = message.from_user.id
    if user_id not in user_states:
        user_states[user_id] = {'first_start': True}
        send_welcome_message(message)
    else:
        update_keyboard(message)

def send_welcome_message(message):
    markup = types.ReplyKeyboardMarkup(row_width=2)
    add_task_button = types.KeyboardButton('–î–æ–±–∞–≤–∏—Ç—å –∑–∞–¥–∞—á—É')
    show_tasks_button = types.KeyboardButton('–ü–æ–∫–∞–∑–∞—Ç—å –≤—Å–µ –∑–∞–¥–∞—á–∏')
    markup.add(add_task_button, show_tasks_button)

    bot.send_message(message.chat.id, "üëã –ü—Ä–∏–≤–µ—Ç! –Ø —Ç–≤–æ–π –º–µ–Ω–µ–¥–∂–µ—Ä –∑–∞–¥–∞—á. –ß—Ç–æ –±—É–¥–µ–º –¥–µ–ª–∞—Ç—å?", reply_markup=markup)
    user_states[message.from_user.id]['first_start'] = False

def update_keyboard(message):
    user_id = message.from_user.id
    markup = types.ReplyKeyboardMarkup(row_width=2)
    add_task_button = types.KeyboardButton('–î–æ–±–∞–≤–∏—Ç—å –∑–∞–¥–∞—á—É')
    show_tasks_button = types.KeyboardButton('–ü–æ–∫–∞–∑–∞—Ç—å –≤—Å–µ –∑–∞–¥–∞—á–∏')

    # –ü—Ä–æ–≤–µ—Ä—è–µ–º –Ω–∞–ª–∏—á–∏–µ –∑–∞–¥–∞—á –¥–ª—è –¥–∞–Ω–Ω–æ–≥–æ –ø–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª—è
    if user_id in tasks and tasks[user_id]:
        delete_task_button = types.KeyboardButton('–£–¥–∞–ª–∏—Ç—å –∑–∞–ø–∏—Å—å')
        delete_all_button = types.KeyboardButton('–£–¥–∞–ª–∏—Ç—å –≤—Å–µ –∑–∞–ø–∏—Å–∏')
        markup.add(add_task_button, show_tasks_button, delete_task_button, delete_all_button)
    else:
        markup.add(add_task_button, show_tasks_button)

    bot.send_message(message.chat.id, "–ß—Ç–æ –¥–∞–ª—å—à–µ?", reply_markup=markup)


@bot.message_handler(func=lambda message: message.text == '–î–æ–±–∞–≤–∏—Ç—å –∑–∞–¥–∞—á—É')
def handle_add_task(message):
    bot.send_message(message.chat.id, "üìù –í–≤–µ–¥–∏ –Ω–∞–∑–≤–∞–Ω–∏–µ –∑–∞–¥–∞—á–∏:")
    bot.register_next_step_handler(message, add_task)


def add_task(message):
    task_name = message.text
    user_id = message.from_user.id

    if user_id not in tasks:
        tasks[user_id] = []

    task_number = len(tasks[user_id]) + 1
    tasks[user_id].append(f'‚úÖ {task_number}. {task_name}')
    bot.send_message(message.chat.id, f'üëç –ó–∞–¥–∞—á–∞ "{task_name}" –¥–æ–±–∞–≤–ª–µ–Ω–∞ —É—Å–ø–µ—à–Ω–æ.')

    # –û–±–Ω–æ–≤–ª–µ–Ω–∏–µ –∫–ª–∞–≤–∏–∞—Ç—É—Ä—ã –ø–æ—Å–ª–µ –¥–æ–±–∞–≤–ª–µ–Ω–∏—è –∑–∞–¥–∞—á–∏
    update_keyboard(message)


@bot.message_handler(func=lambda message: message.text == '–ü–æ–∫–∞–∑–∞—Ç—å –≤—Å–µ –∑–∞–¥–∞—á–∏')
def handle_show_tasks(message):
    user_id = message.from_user.id

    if user_id in tasks and tasks[user_id]:
        task_list = '\n'.join(tasks[user_id])
        bot.send_message(message.chat.id, f'üìã –¢–≤–æ–∏ –∑–∞–¥–∞—á–∏:\n{task_list}')
    else:
        bot.send_message(message.chat.id, 'ü§î –£ —Ç–µ–±—è –Ω–µ—Ç –∑–∞–¥–∞—á.')

    # –û–±–Ω–æ–≤–ª–µ–Ω–∏–µ –∫–ª–∞–≤–∏–∞—Ç—É—Ä—ã –ø–æ—Å–ª–µ –ø—Ä–æ—Å–º–æ—Ç—Ä–∞ –∑–∞–¥–∞—á
    update_keyboard(message)


@bot.message_handler(func=lambda message: message.text == '–£–¥–∞–ª–∏—Ç—å –∑–∞–ø–∏—Å—å')
def handle_delete_task(message):
    bot.send_message(message.chat.id, "üóëÔ∏è –í—ã–±–µ—Ä–∏ –∫–∞–∫—É—é –∑–∞–ø–∏—Å—å —Ç—ã —Ö–æ—á–µ—à—å —É–¥–∞–ª–∏—Ç—å (–≤–≤–µ–¥–∏ –Ω–æ–º–µ—Ä –∏–ª–∏ –ø–æ–ª–Ω–æ–µ –Ω–∞–∑–≤–∞–Ω–∏–µ):")
    bot.register_next_step_handler(message, delete_task)


def delete_task(message):
    user_id = message.from_user.id
    choice = message.text.strip()

    if user_id in tasks and tasks[user_id]:
        task_deleted = False

        # –ü—Ä–æ–≤–µ—Ä—è–µ–º, —Å—É—â–µ—Å—Ç–≤—É—é—Ç –ª–∏ –∑–∞–¥–∞—á–∏
        if choice.isdigit() and 1 <= int(choice) <= len(tasks[user_id]):
            # –ï—Å–ª–∏ –≤—ã–±—Ä–∞–Ω –Ω–æ–º–µ—Ä –∑–∞–¥–∞—á–∏
            del tasks[user_id][int(choice) - 1]
            task_deleted = True
        elif any(choice in task for task in tasks[user_id]):
            # –ï—Å–ª–∏ –≤—ã–±—Ä–∞–Ω–æ –ø–æ–ª–Ω–æ–µ –Ω–∞–∑–≤–∞–Ω–∏–µ –∑–∞–¥–∞—á–∏
            tasks[user_id] = [task for task in tasks[user_id] if choice not in task]
            task_deleted = True

        if task_deleted:
            bot.send_message(message.chat.id, f'üóëÔ∏è –ó–∞–ø–∏—Å—å —É—Å–ø–µ—à–Ω–æ —É–¥–∞–ª–µ–Ω–∞.')
        else:
            bot.send_message(message.chat.id, f'‚ùå –ó–∞–ø–∏—Å—å —Å –Ω–æ–º–µ—Ä–æ–º –∏–ª–∏ –Ω–∞–∑–≤–∞–Ω–∏–µ–º "{choice}" –Ω–µ –Ω–∞–π–¥–µ–Ω–∞.')
    else:
        bot.send_message(message.chat.id, 'ü§î –£ —Ç–µ–±—è –Ω–µ—Ç –∑–∞–¥–∞—á.')

    # –û–±–Ω–æ–≤–ª–µ–Ω–∏–µ –∫–ª–∞–≤–∏–∞—Ç—É—Ä—ã –ø–æ—Å–ª–µ —É–¥–∞–ª–µ–Ω–∏—è –∑–∞–¥–∞—á–∏
    update_keyboard(message)


@bot.message_handler(func=lambda message: message.text == '–£–¥–∞–ª–∏—Ç—å –≤—Å–µ –∑–∞–ø–∏—Å–∏')
def handle_delete_all(message):
    user_id = message.from_user.id

    if user_id in tasks:
        del tasks[user_id]  # –£–¥–∞–ª—è–µ–º –≤—Å–µ –∑–∞–¥–∞—á–∏ –ø–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª—è

    bot.send_message(message.chat.id, 'üóëÔ∏è –í—Å–µ –∑–∞–ø–∏—Å–∏ —É—Å–ø–µ—à–Ω–æ —É–¥–∞–ª–µ–Ω—ã.')

    # –û–±–Ω–æ–≤–ª–µ–Ω–∏–µ –∫–ª–∞–≤–∏–∞—Ç—É—Ä—ã –ø–æ—Å–ª–µ —É–¥–∞–ª–µ–Ω–∏—è –≤—Å–µ—Ö –∑–∞–¥–∞—á
    update_keyboard(message)


# –û–±—Ä–∞–±–æ—Ç–∫–∞ –≤—ã—Ö–æ–¥–∞ –∏–∑ –±–æ—Ç–∞ –≤—Ä—É—á–Ω—É—é (–µ—Å–ª–∏ –±–æ—Ç –ø—Ä–µ—Ä–≤–∞–Ω)
try:
    bot.polling(none_stop=True, interval=0)
except KeyboardInterrupt:
    pass
